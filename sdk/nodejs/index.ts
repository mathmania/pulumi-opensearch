// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./auditConfig";
export * from "./clusterSettings";
export * from "./componentTemplate";
export * from "./composableIndexTemplate";
export * from "./dashboardObject";
export * from "./dashboardTenant";
export * from "./dataStream";
export * from "./destination";
export * from "./getDestination";
export * from "./getHost";
export * from "./indexTemplate";
export * from "./index_";
export * from "./ingestPipeline";
export * from "./ismPolicy";
export * from "./ismPolicyMapping";
export * from "./monitor";
export * from "./provider";
export * from "./role";
export * from "./rolesMapping";
export * from "./script";
export * from "./snapshotRepository";
export * from "./user";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AuditConfig } from "./auditConfig";
import { ClusterSettings } from "./clusterSettings";
import { ComponentTemplate } from "./componentTemplate";
import { ComposableIndexTemplate } from "./composableIndexTemplate";
import { DashboardObject } from "./dashboardObject";
import { DashboardTenant } from "./dashboardTenant";
import { DataStream } from "./dataStream";
import { Destination } from "./destination";
import { Index } from "./index_";
import { IndexTemplate } from "./indexTemplate";
import { IngestPipeline } from "./ingestPipeline";
import { IsmPolicy } from "./ismPolicy";
import { IsmPolicyMapping } from "./ismPolicyMapping";
import { Monitor } from "./monitor";
import { Role } from "./role";
import { RolesMapping } from "./rolesMapping";
import { Script } from "./script";
import { SnapshotRepository } from "./snapshotRepository";
import { User } from "./user";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "opensearch:index/auditConfig:AuditConfig":
                return new AuditConfig(name, <any>undefined, { urn })
            case "opensearch:index/clusterSettings:ClusterSettings":
                return new ClusterSettings(name, <any>undefined, { urn })
            case "opensearch:index/componentTemplate:ComponentTemplate":
                return new ComponentTemplate(name, <any>undefined, { urn })
            case "opensearch:index/composableIndexTemplate:ComposableIndexTemplate":
                return new ComposableIndexTemplate(name, <any>undefined, { urn })
            case "opensearch:index/dashboardObject:DashboardObject":
                return new DashboardObject(name, <any>undefined, { urn })
            case "opensearch:index/dashboardTenant:DashboardTenant":
                return new DashboardTenant(name, <any>undefined, { urn })
            case "opensearch:index/dataStream:DataStream":
                return new DataStream(name, <any>undefined, { urn })
            case "opensearch:index/destination:Destination":
                return new Destination(name, <any>undefined, { urn })
            case "opensearch:index/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "opensearch:index/indexTemplate:IndexTemplate":
                return new IndexTemplate(name, <any>undefined, { urn })
            case "opensearch:index/ingestPipeline:IngestPipeline":
                return new IngestPipeline(name, <any>undefined, { urn })
            case "opensearch:index/ismPolicy:IsmPolicy":
                return new IsmPolicy(name, <any>undefined, { urn })
            case "opensearch:index/ismPolicyMapping:IsmPolicyMapping":
                return new IsmPolicyMapping(name, <any>undefined, { urn })
            case "opensearch:index/monitor:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "opensearch:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "opensearch:index/rolesMapping:RolesMapping":
                return new RolesMapping(name, <any>undefined, { urn })
            case "opensearch:index/script:Script":
                return new Script(name, <any>undefined, { urn })
            case "opensearch:index/snapshotRepository:SnapshotRepository":
                return new SnapshotRepository(name, <any>undefined, { urn })
            case "opensearch:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("opensearch", "index/auditConfig", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/clusterSettings", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/componentTemplate", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/composableIndexTemplate", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/dashboardObject", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/dashboardTenant", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/dataStream", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/destination", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/index", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/indexTemplate", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/ingestPipeline", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/ismPolicy", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/ismPolicyMapping", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/monitor", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/role", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/rolesMapping", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/script", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/snapshotRepository", _module)
pulumi.runtime.registerResourceModule("opensearch", "index/user", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("opensearch", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:opensearch") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
