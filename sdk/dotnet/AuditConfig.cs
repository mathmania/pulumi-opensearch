// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Opensearch
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Opensearch = Pulumi.Opensearch;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Opensearch.AuditConfig("test", new Opensearch.AuditConfigArgs
    ///         {
    ///             Audit = new Opensearch.Inputs.AuditConfigAuditArgs
    ///             {
    ///                 DisabledRestCategories = 
    ///                 {
    ///                     "GRANTED_PRIVILEGES",
    ///                     "AUTHENTICATED",
    ///                 },
    ///                 DisabledTransportCategories = 
    ///                 {
    ///                     "GRANTED_PRIVILEGES",
    ///                     "AUTHENTICATED",
    ///                 },
    ///                 EnableRest = true,
    ///                 EnableTransport = true,
    ///                 ExcludeSensitiveHeaders = true,
    ///                 IgnoreRequests = 
    ///                 {
    ///                     "SearchRequest",
    ///                     "indices:data/read/*",
    ///                     "/_cluster/health",
    ///                 },
    ///                 IgnoreUsers = 
    ///                 {
    ///                     "dashboardserver",
    ///                 },
    ///                 LogRequestBody = true,
    ///                 ResolveBulkRequests = true,
    ///                 ResolveIndices = true,
    ///             },
    ///             Compliance = new Opensearch.Inputs.AuditConfigComplianceArgs
    ///             {
    ///                 Enabled = true,
    ///                 ExternalConfig = false,
    ///                 InternalConfig = true,
    ///                 ReadIgnoreUsers = 
    ///                 {
    ///                     "read-ignore-1",
    ///                 },
    ///                 ReadMetadataOnly = true,
    ///                 ReadWatchedFields = 
    ///                 {
    ///                     new Opensearch.Inputs.AuditConfigComplianceReadWatchedFieldArgs
    ///                     {
    ///                         Fields = 
    ///                         {
    ///                             "field-1",
    ///                             "field-2",
    ///                         },
    ///                         Index = "read-index-1",
    ///                     },
    ///                     new Opensearch.Inputs.AuditConfigComplianceReadWatchedFieldArgs
    ///                     {
    ///                         Fields = 
    ///                         {
    ///                             "field-3",
    ///                         },
    ///                         Index = "read-index-2",
    ///                     },
    ///                 },
    ///                 WriteIgnoreUsers = 
    ///                 {
    ///                     "write-ignore-1",
    ///                 },
    ///                 WriteLogDiffs = false,
    ///                 WriteMetadataOnly = true,
    ///                 WriteWatchedIndices = 
    ///                 {
    ///                     "write-index-1",
    ///                     "write-index-2",
    ///                     "log-*",
    ///                     "*",
    ///                 },
    ///             },
    ///             Enabled = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// # Import by name
    /// 
    /// ```sh
    ///  $ pulumi import opensearch:index/auditConfig:AuditConfig test_config my-config
    /// ```
    /// </summary>
    [OpensearchResourceType("opensearch:index/auditConfig:AuditConfig")]
    public partial class AuditConfig : Pulumi.CustomResource
    {
        [Output("audit")]
        public Output<Outputs.AuditConfigAudit?> Audit { get; private set; } = null!;

        [Output("compliance")]
        public Output<Outputs.AuditConfigCompliance?> Compliance { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;


        /// <summary>
        /// Create a AuditConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuditConfig(string name, AuditConfigArgs args, CustomResourceOptions? options = null)
            : base("opensearch:index/auditConfig:AuditConfig", name, args ?? new AuditConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuditConfig(string name, Input<string> id, AuditConfigState? state = null, CustomResourceOptions? options = null)
            : base("opensearch:index/auditConfig:AuditConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuditConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuditConfig Get(string name, Input<string> id, AuditConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new AuditConfig(name, id, state, options);
        }
    }

    public sealed class AuditConfigArgs : Pulumi.ResourceArgs
    {
        [Input("audit")]
        public Input<Inputs.AuditConfigAuditArgs>? Audit { get; set; }

        [Input("compliance")]
        public Input<Inputs.AuditConfigComplianceArgs>? Compliance { get; set; }

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public AuditConfigArgs()
        {
        }
    }

    public sealed class AuditConfigState : Pulumi.ResourceArgs
    {
        [Input("audit")]
        public Input<Inputs.AuditConfigAuditGetArgs>? Audit { get; set; }

        [Input("compliance")]
        public Input<Inputs.AuditConfigComplianceGetArgs>? Compliance { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        public AuditConfigState()
        {
        }
    }
}
